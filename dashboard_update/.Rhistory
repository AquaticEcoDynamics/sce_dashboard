# If no error occurs, result will contain the result of your code
# and the loop will continue
"Success"
}, error = function(err) {
# Print an error message
print(paste("Error in iteration", d, ": ", conditionMessage(err)))
# Return a value or NULL if needed
# Continue with the next iteration
NULL
})
if (!is.null(result)) {
print(paste("Continuing with iteration", i))
}
}
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
gc()
runApp()
runApp()
runApp()
methydro_data<-read.csv("www/Met_Hydro_sites.csv")
flow_data <- methydro_data %>%
dplyr::filter(group %in% 'flow')
flowMapStations <- data.frame(
name = flow_data$Site,
colour = '#66c2a5',
agency = flow_data$agency,
lat = flow_data$lat,
lon = flow_data$lon,
id = flow_data$stationID,
fullname = flow_data$full_name
)
View(flowMapStations)
View(flowMapStations)
View(flowMapStations)
View(methydro_data)
methydro_data<-read.csv("www/Met_Hydro_sites.csv")
Catchment_data<-read.csv("www/Catchment_monitoring_sites2_withCatchName.csv")
Estuary_data<- read.csv("www/SCESTUARY - Copy.csv")
Oxy_data<-read.csv("www/Oxy_sites.csv")
flow_data <- methydro_data %>%
dplyr::filter(group %in% 'flow')
flowMapStations <- data.frame(
name = flow_data$Site,
colour = '#66c2a5',
agency = flow_data$agency,
lat = flow_data$lat,
lon = flow_data$lon,
URL = '',
id = flow_data$stationID,
fullname = flow_data$full_name
)
tide_data <- methydro_data %>%
dplyr::filter(group %in% 'tide')
tideMapStations <- data.frame(
name = tide_data$Site,
colour = '#66c2a5',
agency = tide_data$agency,
lat = tide_data$lat,
lon = tide_data$lon,
URL = '',
id = tide_data$stationID,
fullname = tide_data$full_name
)
weather_data <- methydro_data %>%
dplyr::filter(group %in% 'met')
weatherMapStations <- data.frame(
name = weather_data$Site,
colour = '#ffd92f',
agency = weather_data$agency,
lat = weather_data$lat,
lon = weather_data$lon,
URL = '',
id = weather_data$stationID,
fullname = weather_data$full_name
)
moor_data <- methydro_data %>%
dplyr::filter(group %in% 'mooring')
wqmoorMapStations <- data.frame(
name = moor_data$Site,
colour = '#ffd92f',
agency = moor_data$agency,
lat = moor_data$lat,
lon = moor_data$lon,
URL = '',
id = moor_data$stationID,
fullname = moor_data$full_name
)
wqcatchMapStations <- data.frame(
name = Catchment_data$Site_Code,
colour = "#a6d854",
#source = "unknown",
agency = "DBCA",
lat = Catchment_data$Latitude,
lon = Catchment_data$Longitude,
URL = Catchment_data$URL,
id = Catchment_data$AWRC_No,
fullname = Catchment_data$SiteName_and_Suburb,
#catchname = Catchment_data$CATCH_NAME
)
wqestMapStations <- data.frame(
name = Estuary_data$Project.Site.Reference,
colour = "#8da0cb",
#source = "unknown",
agency = "DBCA",
lat = Estuary_data$Latitude,
lon = Estuary_data$Longitude,
URL = Estuary_data$URL,
id = Estuary_data$Site.Ref,
fullname = Estuary_data$Site.full.Name
)
wqDOMapStations <- data.frame(
name = Oxy_data$Project.Site.Reference,
colour = "#fc8d62",
source = "unknown",
lat = Oxy_data$Latitude,
lon = Oxy_data$Longitude,
URL = '',
id = '',
fullname = Oxy_data$Site.Name
)
allMapStations <- dplyr::bind_rows(flowMapStations,
tideMapStations,
weatherMapStations,
wqmoorMapStations,
wqcatchMapStations,
wqestMapStations,
wqDOMapStations)
wqcatchMapStations <- data.frame(
name = Catchment_data$Site_Code,
colour = "#a6d854",
#source = "unknown",
agency = "DBCA",
lat = Catchment_data$Latitude,
lon = Catchment_data$Longitude,
URL = Catchment_data$URL,
id = Catchment_data$AWRC_No,
fullname = Catchment_data$SiteName_and_Suburb,
#catchname = Catchment_data$CATCH_NAME
)
wqcatchMapStations <- data.frame(
name = Catchment_data$Site_Code,
colour = "#a6d854",
#source = "unknown",
agency = "DBCA",
lat = Catchment_data$Latitude,
lon = Catchment_data$Longitude,
URL = Catchment_data$URL,
id = Catchment_data$AWRC_No,
fullname = Catchment_data$SiteName_and_Suburb
#catchname = Catchment_data$CATCH_NAME
)
allMapStations <- dplyr::bind_rows(flowMapStations,
tideMapStations,
weatherMapStations,
wqmoorMapStations,
wqcatchMapStations,
wqestMapStations,
wqDOMapStations)
View(tideMapStations)
allMapStations <- rbind(flowMapStations,
tideMapStations,
weatherMapStations,
wqmoorMapStations,
wqcatchMapStations,
wqestMapStations,
wqDOMapStations)
View(tideMapStations)
View(weatherMapStations)
View(wqcatchMapStations)
View(wqestMapStations)
View(wqmoorMapStations)
View(wqDOMapStations)
wqDOMapStations <- data.frame(
name = Oxy_data$Project.Site.Reference,
colour = "#fc8d62",
#source = "unknown",
agency = "DBCA",
lat = Oxy_data$Latitude,
lon = Oxy_data$Longitude,
URL = '',
id = '',
fullname = Oxy_data$Site.Name
)
allMapStations <- rbind(flowMapStations,
tideMapStations,
weatherMapStations,
wqmoorMapStations,
wqcatchMapStations,
wqestMapStations,
wqDOMapStations)
View(allMapStations)
View(methydro_data)
flowMapStations <- data.frame(
name = flow_data$Site,
colour = '#66c2a5',
agency = flow_data$agency,
lat = flow_data$lat,
lon = flow_data$lon,
URL = '',
id = flow_data$stationID,
fullname = flow_data$full_name,
group = "Hydrology - Flow"
)
tide_data <- methydro_data %>%
dplyr::filter(group %in% 'tide')
tideMapStations <- data.frame(
name = tide_data$Site,
colour = '#66c2a5',
agency = tide_data$agency,
lat = tide_data$lat,
lon = tide_data$lon,
URL = '',
id = tide_data$stationID,
fullname = tide_data$full_name,
group = "Hydrology - Tide"
)
weather_data <- methydro_data %>%
dplyr::filter(group %in% 'met')
weatherMapStations <- data.frame(
name = weather_data$Site,
colour = '#ffd92f',
agency = weather_data$agency,
lat = weather_data$lat,
lon = weather_data$lon,
URL = '',
id = weather_data$stationID,
fullname = weather_data$full_name,
group = "Weather"
)
moor_data <- methydro_data %>%
dplyr::filter(group %in% 'mooring')
wqmoorMapStations <- data.frame(
name = moor_data$Site,
colour = '#ffd92f',
agency = moor_data$agency,
lat = moor_data$lat,
lon = moor_data$lon,
URL = '',
id = moor_data$stationID,
fullname = moor_data$full_name,
group = "Water quality - Mooring"
)
wqcatchMapStations <- data.frame(
name = Catchment_data$Site_Code,
colour = "#a6d854",
#source = "unknown",
agency = "DBCA",
lat = Catchment_data$Latitude,
lon = Catchment_data$Longitude,
URL = Catchment_data$URL,
id = Catchment_data$AWRC_No,
fullname = Catchment_data$SiteName_and_Suburb,
#catchname = Catchment_data$CATCH_NAME
group = "Water quality - Catchment"
)
wqestMapStations <- data.frame(
name = Estuary_data$Project.Site.Reference,
colour = "#8da0cb",
#source = "unknown",
agency = "DBCA",
lat = Estuary_data$Latitude,
lon = Estuary_data$Longitude,
URL = Estuary_data$URL,
id = Estuary_data$Site.Ref,
fullname = Estuary_data$Site.full.Name,
group = "Water quality - Estuary"
)
wqDOMapStations <- data.frame(
name = Oxy_data$Project.Site.Reference,
colour = "#fc8d62",
#source = "unknown",
agency = "DBCA",
lat = Oxy_data$Latitude,
lon = Oxy_data$Longitude,
URL = '',
id = '',
fullname = Oxy_data$Site.Name,
group = "Water quality - Oxygenation plant"
)
allMapStations <- rbind(flowMapStations,
tideMapStations,
weatherMapStations,
wqmoorMapStations,
wqcatchMapStations,
wqestMapStations,
wqDOMapStations)
View(allMapStations)
runApp()
runApp()
gc()
runApp()
runApp()
#' awss3Connect
#'
#' @description Establishes connection to the S3 bucket and fetches data
#'
#' @return The return value, if any, from executing the function.
#' @import aws.s3 readr
#' @noRd
library('aws.s3')
# To enforce HTTPS, should be set to TRUE
Sys.setenv('USE_HTTPS' = TRUE)
# Set details for bucket origin
Sys.setenv(
'AWS_DEFAULT_REGION' = '',
'AWS_S3_ENDPOINT' = 'projects.pawsey.org.au',
'AWS_ACCESS_KEY_ID' = '2f1a9d81bdf24a178b2bd18d530e959b',
'AWS_SECRET_ACCESS_KEY' = 'e062073c1faf488cb4209ba8de2eb483'
)
awss3Connect <- function(filename){
# Now set bucket contents as objects
bucket <- 'scevo-data'
#filename = 'data-warehouse/dbca/wiski/DBCA_data_export_2023-07-19_1615.csv'
# fetchedData <- aws.s3::s3read_using(FUN = utils::read.csv,
#                                     check.names = FALSE,
#                                     encoding = "UTF-8",
#                                # show_col_types = FALSE,
#                                # lazy = FALSE,
#                                # progress = FALSE,
#                                object = filename,
#                                bucket = bucket,
#                                filename = basename(filename),
#                                opts = list(
#                                  base_url = "projects.pawsey.org.au",
#                                  region = ""))
fetchedData <- aws.s3::s3read_using(FUN = utils::read.csv,
check.names = FALSE,
#encoding = "UTF-8",
# show_col_types = FALSE,
# lazy = FALSE,
# progress = FALSE,
object = filename,
bucket = bucket,
filename = basename(filename),
opts = list(
base_url = "projects.pawsey.org.au",
region = "",
key = "2f1a9d81bdf24a178b2bd18d530e959b",
secret = "e062073c1faf488cb4209ba8de2eb483"))
return(fetchedData)
}
#                                       object = filename,
#                                       bucket = bucket,
#                                       filename = basename(filename),
#                                       opts = list(
#                                         base_url = "projects.pawsey.org.au",
#                                         region = ""))
#
#   return(fetchedData)
# }
#Rawdata <- read.csv(file = 'www/DBCA_data_export/DBCA_data_export_2023-07-19_1615.csv', check.names = FALSE)
Rawdata <- awss3Connect(filename = 'arms/wiski.csv')
#' awss3Connect
#'
#' @description Establishes connection to the S3 bucket and fetches data
#'
#' @return The return value, if any, from executing the function.
#' @import aws.s3 readr
#' @noRd
library('aws.s3')
# To enforce HTTPS, should be set to TRUE
Sys.setenv('USE_HTTPS' = TRUE)
# Set details for bucket origin
Sys.setenv(
'AWS_DEFAULT_REGION' = '',
'AWS_S3_ENDPOINT' = 'projects.pawsey.org.au',
'AWS_ACCESS_KEY_ID' = '2f1a9d81bdf24a178b2bd18d530e959b',
'AWS_SECRET_ACCESS_KEY' = 'e062073c1faf488cb4209ba8de2eb483'
)
awss3Connect <- function(filename){
# Now set bucket contents as objects
bucket <- 'scevo-data'
#filename = 'data-warehouse/dbca/wiski/DBCA_data_export_2023-07-19_1615.csv'
# fetchedData <- aws.s3::s3read_using(FUN = utils::read.csv,
#                                     check.names = FALSE,
#                                     encoding = "UTF-8",
#                                # show_col_types = FALSE,
#                                # lazy = FALSE,
#                                # progress = FALSE,
#                                object = filename,
#                                bucket = bucket,
#                                filename = basename(filename),
#                                opts = list(
#                                  base_url = "projects.pawsey.org.au",
#                                  region = ""))
fetchedData <- aws.s3::s3read_using(FUN = utils::read.csv,
check.names = FALSE,
#encoding = "UTF-8",
# show_col_types = FALSE,
# lazy = FALSE,
# progress = FALSE,
object = filename,
bucket = bucket,
filename = basename(filename),
opts = list(
base_url = "projects.pawsey.org.au",
region = "",
key = "2f1a9d81bdf24a178b2bd18d530e959b",
secret = "e062073c1faf488cb4209ba8de2eb483"))
return(fetchedData)
}
#                                       object = filename,
#                                       bucket = bucket,
#                                       filename = basename(filename),
#                                       opts = list(
#                                         base_url = "projects.pawsey.org.au",
#                                         region = ""))
#
#   return(fetchedData)
# }
#Rawdata <- read.csv(file = 'www/DBCA_data_export/DBCA_data_export_2023-07-19_1615.csv', check.names = FALSE)
Rawdata <- awss3Connect(filename = 'arms/wiski.csv')
dat<-Rawdata%>%
select(1,2,3,4,5,6,7,8,11,12,13,14,21,24,27,30,33,36,39,47,48,50,51,53,54,56,57,59,60,63,66,68,69,71,72,77,78,86,87)
#1.3 rename columns to something easier to code with
# dat <-dat %>% rename(Time = Collect.Time, Sample.Date = Collect.Date, Month = Collect.Month, Year = Collect.Year,
#                      Project = Program.Code, Site = Program.Site.Ref, Sal.ppt =Salinity..ppt., Temp=Temperature..deg.C.,
#                      ODO.mgl=O2..DO.conc...mg.L.,ODO.sat=O2..DO..sat....., pH=pH..no.units.,Turbidity.NTU=Turbidity..NTU.,
#                      TON.mgl=N..sum.sol.ox...NOx.N.TON...ug.L.,NH3.mgl=NH3.N.NH4.N..sol...ug.L.,DON.mgl=N..sum.sol.org...DON...ug.L.,
#                      TKN.mgl=N..tot.kjel...TKN...ug.L.,NO2.mgl=NO2.N..sol...ug.L.,NO3.mgl=NO3.N..sol...ug.L.,TP.mgl=P..tot...TP.pTP...ug.L.,
#                      FRP.mgl=PO4.P..sol.react...SRP.FRP...ug.L.,DOC.mgl=C..sol.org...DOC.DOC.as.NPOC...ug.L.,TSS.mgl=Suspended.Solids..Total...TSS...mg.L.,TN.mgl=N..tot...TN.pTN...ug.L.,
#                      SPCcondus.cm = Cond...25.deg.C..uS.cm., COC = Primary.CoC.Number)
dat <-dat %>% rename(#Site.Ref = `ï»¿Site Ref`,
Site.Ref = `Site Ref`,
Time = `Collect Time`,
Sample.Date = `Collect Date`,
Month = `Collect Month`,
Year = `Collect Year`,
Project = `Program Code`,
Site = `Program Site Ref`,
Sal.ppt = `Salinity (ppt)`,
Temp= `Temperature (deg C)`,
ODO.mgl=`O2-{DO conc} (mg/L)`,
ODO.sat=`O2-{DO %sat} (%)`,
pH = `pH (no units)`,
Turbidity.NTU= `Turbidity (NTU)`,
TON.mgl= `N (sum sol ox) {NOx-N TON} (ug/L)`,
NH3.mgl= `NH3-N/NH4-N (sol) (ug/L)`,
DON.mgl= `N (sum sol org) {DON} (ug/L)`,
TKN.mgl= `N (tot kjel) {TKN} (ug/L)`,
NO2.mgl= `NO2-N (sol) (ug/L)`,
NO3.mgl= `NO3-N (sol) (ug/L)`,
TP.mgl = `P (tot) {TP pTP} (ug/L)`,
FRP.mgl= `PO4-P (sol react) {SRP FRP} (ug/L)`,
DOC.mgl= `C (sol org) {DOC DOC as NPOC} (ug/L)`,
TSS.mgl= `Suspended Solids (Total) {TSS} (mg/L)`,
TN.mgl = `N (tot) {TN pTN} (ug/L)`,
SPCcondus.cm = `Cond @ 25 deg C (uS/cm)`,
COC = `Primary CoC Number`)
#1.4 Convert analyte units from ug/L to mg/L.
dat$TN.mgl<-dat$TN.mgl*0.001
dat$TON.mgl<-dat$TON.mgl*0.001
dat$NH3.mgl<-dat$NH3.mgl*0.001
dat$DON.mgl<-dat$DON.mgl*0.001
dat$TKN.mgl<-dat$TKN.mgl*0.001
dat$TP.mgl<-dat$TP.mgl*0.001
dat$FRP.mgl<-dat$FRP.mgl*0.001
dat$DOC.mgl<-dat$DOC.mgl*0.001
View(dat)
dat<-dat%>%
unite(TN.mgl, c("TN Sign","TN.mgl"))%>%
unite(TON.mgl, c("NOx-N Sign","TON.mgl"))%>%
unite(NH3.mgl, c("NH3/4-N Sign","NH3.mgl"))%>%
unite(DON.mgl, c("DON Sign","DON.mgl"))%>%
unite(TKN.mgl, c("TKN Sign","TKN.mgl"))%>%
unite(TP.mgl, c("TP Sign","TP.mgl"))%>%
unite(FRP.mgl, c("FRP Sign","FRP.mgl"))%>%
unite(TSS.mgl, c("TSS Sign","TSS.mgl"))%>%
unite(DOC.mgl, c("DOC Sign","DOC.mgl"))
#1.6 remove "_" between '<' symbol and analyte value
dat$TN.mgl<-gsub("_","",as.character(dat$TN.mgl))
dat$TON.mgl<-gsub("_","",as.character(dat$TON.mgl))
dat$NH3.mgl<-gsub("_","",as.character(dat$NH3.mgl))
dat$DON.mgl<-gsub("_","",as.character(dat$DON.mgl))
dat$TKN.mgl<-gsub("_","",as.character(dat$TKN.mgl))
dat$TP.mgl<-gsub("_","",as.character(dat$TP.mgl))
dat$FRP.mgl<-gsub("_","",as.character(dat$FRP.mgl))
dat$TSS.mgl<-gsub("_","",as.character(dat$TSS.mgl))
dat$DOC.mgl<-gsub("_","",as.character(dat$DOC.mgl))
#1.7 halving less than values (standard procedure) so they can be converted into numerics
dat$TN.mgl[dat$TN.mgl == "<0.025"] <- "0.0125"
dat$TSS.mgl[dat$TSS.mgl == "<1"] <- "0.5"
dat$FRP.mgl[dat$FRP.mgl == "<0.005"] <- "0.0025"
dat$TON.mgl[dat$TON.mgl == "<0.01"] <- "0.005"
dat$NH3.mgl[dat$NH3.mgl == "<0.01"] <- "0.005"
dat$TP.mgl[dat$TP.mgl == "<0.005"] <- "0.0025"
dat$TN.mgl[dat$TN.mgl == "<0.025"] <- "0.5"
dat$DON.mgl[dat$DON.mgl == "<0.025"] <- "0.0125"
dat$TKN.mgl[dat$TKN.mgl == "<0.025"] <- "0.0125"
dat$DOC.mgl[dat$DOC.mgl == "<1"] <- "0.5"
#1.8 remove "NA"s from analyte columns
dat[dat=="NA"]<-""
#1.9 removes records with no sample numbers (essentially sites that weren't sampled due to them not flowing etc.) from 2100 to 1841
#dat<-dat[!dat$Sample.Number=="",];
dat<-dat[!dat$`Sample Number`=="",];
#head(dat)
sapply(dat, class)
View(dat)
